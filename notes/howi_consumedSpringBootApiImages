8/22/2024

Step 1.Go to postman and get the endpoint /allImages, Once you do that
go to raw and copy all the json data

Step 2.Once you go back to android right click and create a new package call it dataForAllImages

Step 3.Once you created the package, right click and click kotlin data class file to json
and name it AllImages

Step 4.Create the allImages endpoint in the ApiService:

 @GET("/allImages")
    @Headers("X-Api-Key: ${com.example.practice_app.BuildConfig.API_KEY}")
    suspend fun getAllImages(

    ):Response<List<AllImagesItem>>

Step 5.Create a class called AllImagesViewModel, and this will  hhandle the calls for the AllImagesData

 suspend fun  fetchAllImagesData(): List<AllImagesItem>?{
        return try{
            val response = RetrofitClient.createApiService.getAllImages()
            if(response.isSuccessful){
                response.body()
            }
            else{
                Log.d("TAG", "ERROR fetchData: ${response.code()} ${response.message()}")
                null
            }
        } catch(e : Exception)
        {
            Log.d("TAG", "ERROR fetchData: ${e.message}")
            null
        }
    }

Step 6.Now create a composable called AllImagesComposable and all the image information being displayed will be in here:

package com.example.practice_app.screen

import androidx.compose.foundation.ExperimentalFoundationApi
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.PaddingValues
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.aspectRatio
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import coil.compose.rememberImagePainter
import com.example.practice_app.R
import com.example.practice_app.dataForAllImages.AllImagesItem
import com.example.practice_app.models.AllImagesViewModel
import com.example.practice_app.navigation.NavRoutes
import java.net.URLEncoder

@OptIn(ExperimentalFoundationApi::class)
@Composable
fun AllImagesComposable(navController: NavController) {
    val allImagesData = remember { mutableStateOf<List<AllImagesItem>>(emptyList()) }
    val viewModel: AllImagesViewModel = viewModel()

    LaunchedEffect(Unit) {
        val allImage = viewModel.fetchAllImagesData() ?: emptyList()
        allImagesData.value = allImage
    }

    if (allImagesData.value.isNotEmpty()) {
        LazyVerticalGrid(

            columns = GridCells.Fixed(2),
            modifier = Modifier.fillMaxSize()
                .background(Color(0xFFA2A2A2)),
            contentPadding = PaddingValues(top = 63.dp, bottom = 16.dp, start = 8.dp, end = 8.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp),
            horizontalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            items(allImagesData.value) { images ->
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp)
                        .clickable {
                            val encodedImageUrl = URLEncoder.encode(images.allImageUrl, "UTF-8")
                            val encodedDescription = URLEncoder.encode(images.allImageDescriptions, "UTF-8")
                            navController.navigate(NavRoutes.ImageDetail.route
                                .replace("{imageUrl}", encodedImageUrl)
                                .replace("{description}", encodedDescription))
                        }
                ) {
                    CoilImageForAllImages(
                        imageUrl = images.allImageUrl,
                        contentDescription = "allImages picture",
                        modifier = Modifier
                            .size(150.dp)
                            .aspectRatio(1f)
                            .clip(RoundedCornerShape(47.dp))
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                }
            }
        }
    } else {
        Text("No art work found", modifier = Modifier.padding(16.dp))
    }
}


@Composable
fun CoilImageForAllImages(imageUrl: String, contentDescription: String, modifier: Modifier = Modifier) {
    val imageModel = if (imageUrl.isEmpty()) {
        painterResource(R.drawable.no_photography)
    } else {
        rememberImagePainter(imageUrl)
    }

    Image(
        painter = imageModel,
        contentDescription = contentDescription,
        modifier = modifier
            .fillMaxWidth(),
        contentScale = ContentScale.Fit
    )
}