package com.example.practice_app.db

import android.content.Context
import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import com.example.practice_app.db.FavoriteImageDao
import com.example.practice_app.db.User
import com.example.practice_app.db.UserDao
import com.example.practice_app.models.FavoriteImage

//import com.example.practice_app.models.FavoriteImage

/**BIG SIDE NOTE!: Room specifically requires the database class to be abstract. Attempting to make
 * it concrete would lead to runtime errors.*/
@Database(entities = [User::class, FavoriteImage::class], version = 14)
abstract class AppDatabase : RoomDatabase() {

    //Declare an abstract function that returns the DAO
    //Implementation will be generated by Room
    abstract  fun userDao() : UserDao
    abstract fun favoriteImageDao(): FavoriteImageDao  // Add this line

    //Companion object for singleton pattern instance
    companion object {
        // Singleton pattern prevents multiple instances of the database
        @Volatile
        private var INSTANCE : AppDatabase? = null

        //Function to retrieve the database
        fun getDatabase(context : Context) : AppDatabase{
            // Single thread-safe instance
            return INSTANCE ?: synchronized(this){
                // Create database only if needed
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "practiceapp_database"
                )
                    //This sets a destructive migration strategy on the builder.
                    // If the database schema changes, it will destroy and recreate the database instead of
                    // running migrations.
                    .fallbackToDestructiveMigration()
                    .build()

                // Save instance for future calls
                INSTANCE = instance
                instance
            }
        }
    }

}